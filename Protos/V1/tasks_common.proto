/**
 * Messages describing tasks and associated requests and responses.
 */
syntax = "proto3";

package armonik.api.grpc.v1.tasks;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "objects.proto";
import "sort_direction.proto";
import "task_status.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1.Tasks";

/**
 * A raw task object.
 *
 * Used when a single task is returned.
 */
message TaskRaw {
  string id = 1; /** The task ID. */
  string session_id = 2; /** The session ID. A task have only one related session but a session have many tasks. */
  string owner_pod_id = 3; /** The owner pod ID. */

  string initial_task_id = 22; /** The initial task ID. Set when a task is submitted independantly of retries. */
  repeated string parent_task_ids = 4; /** The parent task IDs. A tasks can be a child of another task. */
  repeated string data_dependencies = 5; /** The data dependencies. A task have data dependencies. */
  repeated string expected_output_ids = 6; /** The expected output IDs. A task have expected output IDs. */
  repeated string retry_of_ids = 7; /** The retry of IDs. When a task fail, retry will use these set of IDs. */

  task_status.TaskStatus status = 8; /** The task status. */
  string status_message = 9; /** The status message. */

  TaskOptions options = 10; /** The task options. */

  google.protobuf.Timestamp created_at = 11; /** The task creation date. */
  google.protobuf.Timestamp submitted_at = 12; /** The task submission date. */
  google.protobuf.Timestamp started_at = 13; /** The task start date. */
  google.protobuf.Timestamp ended_at = 14; /** The task end date. Also used when task failed. */
  google.protobuf.Duration creation_to_end_duration = 20; /** The task duration. Between the creation date and the end date. */
  google.protobuf.Duration processing_to_end_duration = 21; /** The task calculated duration. Between the start date and the end date. */
  google.protobuf.Timestamp pod_ttl = 15; /** The pod TTL (Time To Live). */

  /**
   * Represents the task output.
   */
  message Output {
    bool success = 1; /** To know if a task have failed or succeed. */
    string error = 2; /** The error message. Only set if task have failed. */
  }

  Output output = 16; /** The task output. */

  string pod_hostname = 17; /** The hostname of the container running the task. */
  google.protobuf.Timestamp received_at = 18; /** When the task is received by the agent. */
  google.protobuf.Timestamp acquired_at = 19; /** When the task is acquired by the agent. */
}

/**
 * A summary task object.
 *
 * It contains only a subset of the fields from the underlying task object.
 * Used when a list of tasks are returned.
 */
message TaskSummary {
  string id = 1; /** The task ID. */
  string session_id = 2; /** The session ID. A task have only one related session but a session have many tasks. */
  string owner_pod_id = 10; /** The owner pod ID. */

  string initial_task_id = 22; /** The initial task ID. Set when a task is submitted independantly of retries. */
  int64 count_parent_task_ids = 21; /** Count the parent task IDs. A tasks can be a child of another task. */
  int64 count_data_dependencies = 11; /** Count the data dependencies. A task have data dependencies. */
  int64 count_expected_output_ids = 13; /** Count the expected output IDs. A task have expected output IDs. */
  int64 count_retry_of_ids = 14; /** Count the retry of IDs. When a task fail, retry will use these set of IDs. */

  task_status.TaskStatus status = 4; /** The task status. */
  string status_message = 9; /** The status message. */

  TaskOptions options = 3; /** The task options. */

  google.protobuf.Timestamp created_at = 5; /** The task creation date. */
  google.protobuf.Timestamp submitted_at = 12; /** The task submission date. */
  google.protobuf.Timestamp started_at = 6; /** The task start date. */
  google.protobuf.Timestamp ended_at = 7; /** The task end date. Also used when task failed. */
  google.protobuf.Duration creation_to_end_duration = 15; /** The task duration. Between the creation date and the end date. */
  google.protobuf.Duration processing_to_end_duration = 16; /** The task calculated duration. Between the start date and the end date. */
  google.protobuf.Timestamp pod_ttl = 20; /** The pod TTL (Time To Live). */

  string error = 8; /** The error message. Only set if task have failed. */

  string pod_hostname = 17; /** The hostname of the container running the task. */
  google.protobuf.Timestamp received_at = 18; /** When the task is received by the agent. */
  google.protobuf.Timestamp acquired_at = 19; /** When the task is acquired by the agent. */
}

/**
 * Represents every available field in a task summary.
 */
enum TaskSummaryField {
  TASK_SUMMARY_FIELD_UNSPECIFIED = 16; /** Unspecified */
  TASK_SUMMARY_FIELD_TASK_ID = 0; /** The task ID. */
  TASK_SUMMARY_FIELD_SESSION_ID = 1; /** The session ID. */
  TASK_SUMMARY_FIELD_OWNER_POD_ID = 9; /** The owner pod ID. */
  TASK_SUMMARY_FIELD_INITIAL_TASK_ID = 10; /** The initial task ID. Set when a task is submitted independantly of retries. */
  TASK_SUMMARY_FIELD_STATUS = 2; /** The task status. */
  TASK_SUMMARY_FIELD_CREATED_AT = 3; /** The task creation date. */
  TASK_SUMMARY_FIELD_SUBMITTED_AT = 11; /** The task submission date. */
  TASK_SUMMARY_FIELD_STARTED_AT = 4; /** The task start date. */
  TASK_SUMMARY_FIELD_ENDED_AT = 5; /** The task end date. */
  TASK_SUMMARY_FIELD_CREATION_TO_END_DURATION = 6; /** The task duration. Between the creation date and the end date. */
  TASK_SUMMARY_FIELD_PROCESSING_TO_END_DURATION = 7; /** The task calculated duration. Between the start date and the end date. */
  TASK_SUMMARY_FIELD_POD_TTL = 12; /** The pod TTL (Time To Live). */
  TASK_SUMMARY_FIELD_POD_HOSTNAME = 13; /** The hostname of the container running the task. */
  TASK_SUMMARY_FIELD_RECEIVED_AT = 14; /** When the task is received by the agent. */
  TASK_SUMMARY_FIELD_ACQUIRED_AT = 15; /** When the task is acquired by the agent. */
  TASK_SUMMARY_FIELD_ERROR = 8; /** The error message. Only set if task have failed. */
}

/**
 * Represents a field in a task option.
 */
enum TaskOptionField {
  TASK_OPTION_FIELD_UNSPECIFIED = 0;
  TASK_OPTION_FIELD_MAX_DURATION = 1;
  TASK_OPTION_FIELD_MAX_RETRIES = 2;
  TASK_OPTION_FIELD_PRIORITY = 3;
  TASK_OPTION_FIELD_PARTITION_ID = 4;
  TASK_OPTION_FIELD_APPLICATION_NAME = 5;
  TASK_OPTION_FIELD_APPLICATION_VERSION = 6;
  TASK_OPTION_FIELD_APPLICATION_NAMESPACE = 7;
  TASK_OPTION_FIELD_APPLICATION_SERVICE = 8;
  TASK_OPTION_FIELD_ENGINE_TYPE = 9;
}

/**
 * Represents a generic field in a task option.
 */
message TaskOptionGenericField {
  string field = 1; /** The generic field. */
}

message TaskField {
  oneof field {
    TaskSummaryField task_summary_field = 1; /** The task summary field. */
    TaskOptionField task_option_field = 2; /** The task option field. */
    TaskOptionGenericField task_option_generic_field = 3; /** The task option generic field. */
  }
}

/**
 * Request to list tasks.
 *
 * Use pagination, filtering and sorting.
 */
message ListTasksRequest {
  int32 page = 1; /** The page number. Start at 0.*/
  int32 page_size = 2; /** The page size. */

  /**
   * Represents a filter with every available fields.
   *
   * Every field can be used as the same time.
   */
  message Filter {
    string session_id = 1; /** The session ID of related tasks. */
    repeated task_status.TaskStatus status = 2; /** Use the differents status of a task to filter tasks having one of the requested status. */
    google.protobuf.Timestamp created_after = 3; /** Use the creation date of a task to filter tasks created after the input. */
    google.protobuf.Timestamp created_before = 4; /** Use the creation date of a task to filter tasks created before the input. */
    google.protobuf.Timestamp started_after = 5; /** Use the start date of a task to filter tasks started after the input. */
    google.protobuf.Timestamp started_before = 6; /** Use the start date of a task to filter tasks started before the input. */
    google.protobuf.Timestamp ended_after = 7; /** Use the end date of a task to filter tasks ended after the input. */
    google.protobuf.Timestamp ended_before = 8; /** Use the end date of a task to filter tasks ended before the input. */
  }

  /** The filter.
   *
   * Must be set for every request but can be empty.
   */
  Filter filter = 3;

  /**
   * Represents the sort object.
   */
  message Sort {
    TaskField field = 1; /** The field to sort on. */
    sort_direction.SortDirection direction = 2; /** The sort direction. */
  }

  /** The sort.
   *
   * Must be set for every request.
   */
  Sort sort = 4;

  // Request error message in case of error in task
  bool with_errors = 5;
}

/**
 * Response to list tasks.
 *
 * Use pagination, filtering and sorting from the request.
 * Return a list of formated tasks.
 */
message ListTasksResponse {
  repeated TaskSummary tasks = 1; /** The list of tasks. */

  int32 page = 2; /** The page number. Start at 0. */
  int32 page_size = 3; /** The page size. */
  int32 total = 4; /** The total number of tasks. */
}

/**
 * Response to list tasks.
 *
 * Use pagination, filtering and sorting from the request.
 * Return a list of formated tasks.
 */
message ListTasksRawResponse {
  repeated TaskRaw tasks = 1; /** The list of tasks. */

  int32 page = 2; /** The page number. Start at 0. */
  int32 page_size = 3; /** The page size. */
  int32 total = 4; /** The total number of tasks. */
}

/**
 * Request for getting a single task.
 */
message GetTaskRequest {
  string task_id = 1; /** The task ID. */
}

/**
 * Response for getting a single task.
 *
 * Return a raw task.
 */
message GetTaskResponse {
  TaskRaw task = 1; /** The task. */
}

/**
 * Request to cancel one or many tasks
 */
message CancelTasksRequest {
  // Ids of the tasks to cancel
  repeated string task_ids = 1;
}

/**
 * Response from canceling one or many tasks
 */
message CancelTasksResponse {
  // Tasks that have been asked to cancel
  repeated TaskSummary tasks = 1;
}

/*
*  Request for getting result ids of tasks ids.
*/
message GetResultIdsRequest {
  repeated string task_id = 1; /** The task IDs. */
}

/*
* Response for getting result ids of tasks ids.
*/
message GetResultIdsResponse {
  /**
   * Represents a task result.
  */
  message MapTaskResult {
    string task_id = 1; /** The task ID. */
    repeated string result_ids = 2; /** The result IDs. */
  }

  repeated MapTaskResult task_results = 1; /** The task results. */
}

/**
 * Request to get count from tasks by status
 */
message CountTasksByStatusRequest {}

/**
 * Response to get count from tasks by status
 */
message CountTasksByStatusResponse {
  repeated StatusCount status = 1; /** Number of tasks by status. Expected to have only 1 objct by tasks status. */
}

/**
* Request to create tasks.
*/
message SubmitTasksRequest {
  message TaskCreation {
    repeated string expected_output_keys = 1; /** Unique ID of the results that will be produced by the task. Results should be created using ResultsService. */
    repeated string data_dependencies = 2; /** Unique ID of the results that will be used as datadependencies. Results should be created using ResultsService. */
    string payload_id = 3; /** Unique ID of the result that will be used as payload. Result should created using ResultsService. */
    TaskOptions task_options = 4; /** Optionnal task options. */
  }

  string session_id = 1; /** The session ID. */
  TaskOptions task_options = 2; /** The options for the tasks. Each task will have the same. Options are merged with the one from the session. */
  repeated TaskCreation task_creations = 3; /** Task creation requests. */
}

/**
* Response to create tasks.
*
* expected_output_ids and data_dependencies must be created through ResultsService.
*
* Remark : this may have to be enriched to a better management of errors but
* will the client application be able to manage a missing data dependency or expected output ?
*/
message SubmitTasksResponse {
  message TaskInfo {
    string task_id = 1; /** The task ID. */
    repeated string expected_output_ids = 2; /** The expected output IDs. A task have expected output IDs. */
    repeated string data_dependencies = 3; /** The data dependencies IDs (inputs). A task have data dependencies. */
    string payload_id = 4; /** Unique ID of the result that will be used as payload. Result should created using ResultsService. */
  }

  repeated TaskInfo task_infos = 1; /** List of task infos if submission successful, else throw gRPC exception. */
}
