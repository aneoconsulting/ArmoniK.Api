syntax = "proto3";

package armonik.api.grpc.v1.results;

import "google/protobuf/timestamp.proto";
import "result_status.proto";
import "sort_direction.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1.Results";

/**
 * A raw result object.
 *
 * Used when a list or a single result is returned.
 */
message ResultRaw {
  string session_id = 1; /** The session ID. */
  string name = 2; /** The result name. Given by the client. */
  string owner_task_id = 3; /** The owner task ID. */
  result_status.ResultStatus status = 4; /** The result status. */
  google.protobuf.Timestamp created_at = 5; /** The result creation date. */
  google.protobuf.Timestamp completed_at = 6; /** The result completion date. */
  string result_id = 8; /** The result ID. Uniquely generated by the server. */
}

// TODO: Implements new filters using these fields.
/**
 * Represents every available field in a result.
 */
enum ResultRawField {
  RESULT_RAW_FIELD_UNSPECIFIED = 0; /** The default value. */
  RESULT_RAW_FIELD_SESSION_ID = 1; /** The session ID. */
  RESULT_RAW_FIELD_NAME = 2; /** The result name. */
  RESULT_RAW_FIELD_OWNER_TASK_ID = 3; /** The owner task ID. */
  RESULT_RAW_FIELD_STATUS = 4; /** The result status. */
  RESULT_RAW_FIELD_CREATED_AT = 5; /** The result creation date. */
  RESULT_RAW_FIELD_COMPLETED_AT = 6; /** The result completion date. */
  RESULT_RAW_FIELD_RESULT_ID = 7; /** The result ID. */
}

message ResultField {
  oneof field {
    ResultRawField field = 1; /** The field to use to sort results. */
  }
}

/**
 * Request to list results.
 *
 * Use pagination, filtering and sorting.
 */
message ListResultsRequest {
  int32 page = 1; /** The page number. Start at 0. */
  int32 page_size = 2; /** The page size. */

  /**
   * Represents a filter with all available fields.
   *
   * Any fields can be used at the same time.
   */
  message Filter {
    string session_id = 1; /** The session ID. */
    string name = 2; /** The result name. */
    string owner_task_id = 3; /** The owner task ID. */
    result_status.ResultStatus status = 4; /** The result status. */
    google.protobuf.Timestamp created_after = 5; /** Use the creation date of a result to filter results created after the input. */
    google.protobuf.Timestamp created_before = 6; /** Use the creation date of a result to filter results created before the input. */
    google.protobuf.Timestamp completed_after = 7; /** Use the creation date of a result to filter results completed after the input. */
    google.protobuf.Timestamp completed_before = 8; /** Use the creation date of a result to filter results completed before the input. */
    google.protobuf.Timestamp wait_for_data_after = 9; /** Use the creation date of a result to filter results passed in status wait_for_data after the input. */
    google.protobuf.Timestamp wait_for_data_before = 10; /** Use the creation date of a result to filter results passed in status wait_for_data before the input. */
    string result_id = 11; /** The result ID. Uniquely generated by the server. */
  }

  /**
   * The filter.
   *
   * Must be set for every request but allowed to be empty.
   */
  Filter filter = 3;

  /**
   * Represents the sort object.
   */
  message Sort {
    ResultField field = 1; /** The field to use to sort results. */
    sort_direction.SortDirection direction = 2; /** The direction to use to sort results. */
  }

  /** The sort.
   *
   * Must be set for every request.
   */
  Sort sort = 4;
}

/**
 * Response to list results.
 *
 * Use pagination, filtering and sorting from the request.
 * Retunr a list of raw results.
 */
message ListResultsResponse {
  repeated ResultRaw results = 1; /** The list of raw results. */

  int32 page = 2; /** The page number. Start at 0. */
  int32 page_size = 3; /** The page size. */
  int32 total = 4; /** The total number of results. */
}

/**
 * Request to get an result.
 */
message GetResultRequest {
  string result_id = 1; /** Result id. Must fail when name is empty. **/
}

/**
 * Response to get an result.
 */
message GetResultResponse {
  ResultRaw result = 1; /** The result. */
}

/*
*  Request for getting the id of the task that should create this result
*/
message GetOwnerTaskIdRequest {
  string session_id = 1; /** The session ID. */
  repeated string result_id = 2; /** The list of result ID/name. */
}

/*
* Response for getting the id of the task that should create this result
*/
message GetOwnerTaskIdResponse {
  message MapResultTask {
    string result_id = 1; /** The result ID/name. */
    string task_id = 2; /** The owner task ID associated to the result. */
  }
  repeated MapResultTask result_task = 1;
  string session_id = 2; /** The session ID. */
}

/*
* Request for creating results without data
*/
message CreateResultsMetaDataRequest {
  /**
  * A result to create.
  */
  message ResultCreate {
    string name = 1; /** The result name. Given by the client. */
  }
  repeated ResultCreate results = 1; /** The list of results to create. */
  string session_id = 2; /** The session in which create results. */
}

/*
* Response for creating results without data
*/
message CreateResultsMetaDataResponse {
  repeated ResultRaw results = 1; /** The list of raw results that were created. */
}

/*
* Request for creating results without data
*/
message CreateResultsRequest {
  /**
  * A result to create.
  */
  message ResultCreate {
    string name = 1; /** The result name. Given by the client. */
    bytes data = 2; /** The actual data of the result. */
  }
  repeated ResultCreate results = 1; /** Results to create. */
  string session_id = 2; /** The session in which create results. */
}

/*
* Response for creating results without data
*/
message CreateResultsResponse {
  repeated ResultRaw results = 1; /** The raw results that were created. */
}

/*
* Request for uploading results data through stream.
* Data must be sent in multiple chunks.
* Only one result can be uploaded.
*/
message UploadResultDataRequest {
  /**
  * The metadata to identify the result to update.
  */
  message ResultIdentifier {
    string session_id = 1; /** The session of the result. */
    string result_id = 2; /** The ID of the result. */
  }

  /**
  * The possible messages that constitute a UploadResultDataRequest
  * They should be sent in the following order:
  * - id
  * - data_chunk (stream can have multiple data_chunk messages that represent data divided in several parts)
  *
  * Data chunk cannot exceed the size returned by the GetServiceConfiguration rpc method
  */
  oneof type {
    ResultIdentifier id = 1; /** The identifier of the result to which add data. */
    bytes data_chunk = 2; /** A chunk of data. */
  }
}

/*
* Response for creating results without data
*/
message UploadResultDataResponse {
  ResultRaw result = 1; /** The metadata of the updated result that was updated. */
}

/*
* Response for obtaining results service configuration
*/
message ResultsServiceConfigurationResponse {
  int32 data_chunk_max_size = 1; /** Maximum size supported by a data chunk for the result service*/
}

/*
* Request for getting a result
*/
message DownloadResultDataRequest {
  string session_id = 1; /** The session of the result. */
  string result_id = 2; /** The ID of the result. */
}

/*
* Response for creating results without data
*/
message DownloadResultDataResponse {
  /**
  * The possible messages that constitute a UploadResultDataRequest
  * Get the data chunks of the result
  */
  bytes data_chunk = 1; /** A chunk of data. */
}

/*
* Request deleting data from results results but keeping metadata
*/
message DeleteResultsDataRequest {
  string session_id = 1; /** The session of the results. */
  repeated string result_id = 2; /** The ID of the results to delete. */
}

/*
* Response deleting data from results results but keeping metadata
*/
message DeleteResultsDataResponse {
  string session_id = 1; /** The session of the results. */
  repeated string result_id = 2; /** The ID of the deleted results. */
}
