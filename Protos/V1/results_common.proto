syntax = "proto3";

package armonik.api.grpc.v1.results;

import "result_status.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1.Results";

/**
 * A raw result object.
 *
 * Used when a list or a single result is returned.
 */
message ResultRaw {
  string id = 1; /** The result ID. */
  string session_id = 2; /** The session ID. */
  string name = 3; /** The result name. */
  string owner_task_id = 4; /** The owner task ID. */
  result_status.ResultStatus status = 5; /** The result status. */
  string created_at = 6; /** The result creation date. */
}

/**
 * Request to list results.
 *
 * Use pagination, filtering and sorting.
 */
message ListResultsRequest {
  int32 page = 1; /** The page number. Start at 0. */
  int32 page_size = 2; /** The page size. */

  /**
   * Represents a filter with all available fields.
   *
   * Any fields can be used at the same time.
   */
  message Filter {
    string id = 1; /** The result ID. */
    string session_id = 2; /** The session ID. */
    string name = 3; /** The result name. */
    string owner_task_id = 4; /** The owner task ID. */
    result_status.ResultStatus status = 5; /** The result status. */
    string created_after = 6; /** Use the creation date of a result to filter results created after the input. */
    string created_before = 7; /** Use the creation date of a result to filter results created before the input. */
  }

  /**
   * The filter.
   *
   * Must be set for every request but allowed to be empty.
   */
  Filter filter = 3;

  /**
   * Represents every available field to use in order to sort results.
   */
  enum SortField {
    SORT_FIELD_UNSPECIFIED = 0; /** Unspecified. */
    ID = 1; /** The result ID. */
    SESSION_ID = 2; /** The session ID. */
    NAME = 3; /** The result name. */
    OWNER_TASK_ID = 4; /** The owner task ID. */
    STATUS = 5; /** The result status. */
    CREATED_AT = 6; /** The result creation date. */
  }

  /**
   * Represents every available order directions.
   */
  enum SortOrder {
    SORT_ORDER_UNSPECIFIED = 0; /** Unspecified. */
    ASC = 1; /** Ascending. */
    DESC = 2; /** Descending. */
  }

  /**
   * Represents the sort object.
   */
  message Sort {
    SortField field = 1; /** The field to sort by. */
    SortOrder order = 2; /** The order direction. */
  }

  /** The sort.
   *
   * Must be set for every request.
   */
  Sort sort = 4;
}

/**
 * Response to list results.
 *
 * Use pagination, filtering and sorting from the request.
 * Retunr a list of raw results.
 */
message ListResultsResponse {
  repeated ResultRaw results = 1; /** The list of raw results. */

  int32 page = 2; /** The page number. Start at 0. */
  int32 page_size = 3; /** The page size. */
  int32 total = 4; /** The total number of results. */
}

/*
*  Request for getting the id of the task that should create this result
*/
message GetOwnerTaskIdRequest {
  string session_id = 1;
  repeated string result_id = 2;
}

/*
* Response for getting the id of the task that should create this result
*/
message GetOwnerTaskIdResponse {
  message MapResultTask {
    string result_id = 1;
    string task_id = 2;
  }
  repeated MapResultTask result_task = 1;
  string session_id = 2;
}
