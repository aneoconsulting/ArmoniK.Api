/**
 * Messages describing sessions and associated requests and responses.
 */
syntax = "proto3";

package armonik.api.grpc.v1.sessions;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "objects.proto";
import "session_status.proto";
import "sort_direction.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1.Sessions";

/**
 * A raw session object.
 *
 * Used when a single session is returned.
 */
message SessionRaw {
  string session_id = 1; /** The session ID. */
  session_status.SessionStatus status = 2; /** The session status. */
  repeated string partition_ids = 3; /** The partition IDs. */
  TaskOptions options = 4; /** The task options. In fact, these are used as default value in child tasks. */

  google.protobuf.Timestamp created_at = 5; /** The creation date. */
  google.protobuf.Timestamp cancelled_at = 6; /** The cancellation date. Only set when status is 'cancelled'. */
  google.protobuf.Duration duration = 7; /** The duration. Only set when status is 'cancelled'. */
}

/**
 * A summary session object.
 *
 * Does not contain all the fields of the object.
 * Used when a list of sessions is returned.
 */
message SessionSummary {
  string session_id = 1; /** The session ID. */

  session_status.SessionStatus status = 2; /** The session status. */
  google.protobuf.Timestamp created_at = 3; /** The creation date. */
  google.protobuf.Timestamp cancelled_at = 4; /** The cancellation date. Only set when status is 'cancelled'. */
  google.protobuf.Duration duration = 7; /** The duration. Only set when status is 'cancelled'. */

  TaskOptions options = 5; /** The default task options. */
}

// TODO: Implements new filters using these fields.
/**
 * Represents every available field in a session summary.
 */
enum SessionSummaryField {
  SESSION_SUMMARY_FIELD_SESSION_ID = 0; /** The session ID. */
  SESSION_SUMMARY_FIELD_STATUS = 1; /** The session status. */
  SESSION_SUMMARY_FIELD_CREATED_AT = 2; /** The creation date. */
  SESSION_SUMMARY_FIELD_CANCELLED_AT = 3; /** The cancellation date. */
  SESSION_SUMMARY_FIELD_DURATION = 4; /** The duration. */
  SESSION_SUMMARY_FIELD_OPTIONS = 5; /** The default task options. */
}

/**
 * Request to list sessions.
 *
 * Use pagination, filtering and sorting.
 */
message ListSessionsRequest {
  int32 page = 1; /** The page number. Start at 0. */
  int32 page_size = 2; /** The page size. */

  /**
   * Represents a filter with all available fields.
   *
   * Any fields can be used at the same time.
   */
  message Filter {
    string application_name = 1; /** The application name. */
    string application_version = 2; /** The application version. */
    string session_id = 3; /** The session ID. */
    google.protobuf.Timestamp created_after = 4; /** Use the creation date of a session to filter sessions created after the input. */
    google.protobuf.Timestamp created_before = 5; /** Use the creation date of a session to filter sessions created before the input. */
    google.protobuf.Timestamp cancelled_after = 6; /** Use the cancellation date of a session to filter sessions cancelled after the input. */
    google.protobuf.Timestamp cancelled_before = 7; /** Use the cancellation date of a session to filter sessions cancelled before the input. */
    session_status.SessionStatus status = 8; /** The session status. */
  }

  /** The filter.
   *
   * Must be set for every request but allowed to be empty.
   */
  Filter filter = 3;

  /**
   * Represents the sort object.
   */
  message Sort {
    SessionSummaryField field = 1; /** The field to sort on. */
    sort_direction.SortDirection direction = 2; /** The sort direction. */
  }

  /** The sort.
   *
   * Must be set for every request.
   */
  Sort sort = 4;

  /**
   * Flag to tell if server must return task options in summary sessions
   */
  bool with_task_options = 5;
}

/**
 * Response to list sessions.
 *
 * Use pagination, filtering and sorting from the request.
 * Return a list of summary sessions.
 */
message ListSessionsResponse {
  repeated SessionSummary sessions = 1; /** The list of sessions. */

  int32 page = 2; /** The current page. Start at 0. */
  int32 page_size = 3; /** The page size. */
  int32 total = 4; /** The total number of sessions. */
}

/**
 * Request for getting a single session.
 */
message GetSessionRequest {
  string session_id = 1; /** The session ID. */
}

/**
 * Response for getting a single session.
 *
 * Return a raw session.
 */
message GetSessionResponse {
  SessionRaw session = 1; /** The session. */
}

/**
 * Request for cancelling a single session.
 */
message CancelSessionRequest {
  string session_id = 1; /** The session ID. */
}

/**
 * Response for cancelling a single session.
 *
 * Return a raw session.
 */
message CancelSessionResponse {
  SessionRaw session = 1; /** The session. */
}

/**
 * Request to get count from tasks by status
 */
message CountTasksByStatusRequest {
  string session_id = 1; /** The session ID. Must fail when session_id is empty. */
}

/**
 * Response to get count from tasks by status
 */
message CountTasksByStatusResponse {
  repeated StatusCount status = 1; /** Number of tasks by status. Expected to have only 1 objct by tasks status. */
}
