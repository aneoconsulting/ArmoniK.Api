use super::super::ResultStatus;

use crate::api::v3;

/// A raw Result object.
#[derive(Debug, Clone, Default)]
pub struct ResultRaw {
    /// The session ID.
    pub session_id: String,
    /// The result name. Given by the client.
    pub name: String,
    /// The owner task ID.
    pub owner_task_id: String,
    /// The result status.
    pub status: ResultStatus,
    /// The result creation date.
    pub created_at: Option<prost_types::Timestamp>,
    /// The result completion date.
    pub completed_at: Option<prost_types::Timestamp>,
    /// The result ID. Uniquely generated by the server.
    pub result_id: String,
}

impl From<ResultRaw> for v3::results::ResultRaw {
    fn from(value: ResultRaw) -> Self {
        Self {
            session_id: value.session_id,
            name: value.name,
            owner_task_id: value.owner_task_id,
            status: value.status as i32,
            created_at: value.created_at,
            completed_at: value.completed_at,
            result_id: value.result_id,
        }
    }
}

impl From<v3::results::ResultRaw> for ResultRaw {
    fn from(value: v3::results::ResultRaw) -> Self {
        Self {
            session_id: value.session_id,
            name: value.name,
            owner_task_id: value.owner_task_id,
            status: value.status.into(),
            created_at: value.created_at,
            completed_at: value.completed_at,
            result_id: value.result_id,
        }
    }
}

super::super::impl_convert!(ResultRaw : Option<v3::results::ResultRaw>);
