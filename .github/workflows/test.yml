name: Tests

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  csharp:
    name: Test C#
    strategy:
      fail-fast: false
      matrix:
        dotnet:
          - version: ''
            framework: net4.7
          - version: ''
            framework: net4.8
          - version: 6.0
            framework: net6.0
          - version: 8.0
            framework: net8.0
        platform:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-2019
            runtime: windows-x64
          - os: windows-2022
            runtime: windows-x64
        handler:
          - ''
          - GrpcWebHandler
        exclude:
          - dotnet:
              version: ''
            platform:
              os: ubuntu-latest
          - dotnet:
              version: 6.0
            handler: GrpcWebHandler
          - dotnet:
              version: 8.0
            handler: GrpcWebHandler
    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: 0

      - name: Generate certs
        working-directory: packages/csharp/
        shell: bash
        run: |
          mkdir certs
          cd certs
          ../../../scripts/certs.sh
      - name: Install certs
        if: ${{ matrix.platform.os == 'ubuntu-latest' }}
        working-directory: packages/csharp/certs
        run: |
          sudo apt install ca-certificates
          sudo mkdir -p /usr/local/share/ca-certificates/
          sudo cp server2-ca.pem /usr/local/share/ca-certificates/ca.crt
          sudo update-ca-certificates
      - name: Install certs
        if: ${{ contains(matrix.platform.os, 'windows') }}
        working-directory: packages/csharp/certs
        run: |
          certutil -addstore -f "ROOT" server2-ca.pem

      - name: Install .NET Core
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4
        if: ${{ matrix.dotnet.version }} != ""
        with:
          dotnet-version: ${{ matrix.dotnet.version }}

      - name: Build Mock server
        working-directory: packages/csharp/ArmoniK.Api.Mock
        shell: bash
        run: |
          dotnet publish -o ../out
          [ -e ../out/ArmoniK.Api.Mock.exe ] || ln -s ArmoniK.Api.Mock ../out/ArmoniK.Api.Mock.exe

      - name: Test
        working-directory: packages/csharp/
        shell: bash
        env:
          GrpcClient__HttpMessageHandler: ${{ matrix.handler }}
        run: |
          set +e
          set -x
          export CertFolder="$PWD/certs"
          ./out/ArmoniK.Api.Mock.exe \
            grpc:port=5000 http:port=4999 \
            & notls_pid=$!
          ./out/ArmoniK.Api.Mock.exe \
            grpc:port=5001 http:port=5001 \
            http:cert="$CertFolder/server1.pem" http:key="$CertFolder/server1.key" \
            & tls_pid=$!
          ./out/ArmoniK.Api.Mock.exe \
            grpc:port=5002 http:port=5002 \
            http:cert="$CertFolder/server2.pem" http:key="$CertFolder/server2.key" \
            & tlsstore_pid=$!
          ./out/ArmoniK.Api.Mock.exe \
            grpc:port=5003 http:port=5003 \
            http:cert="$CertFolder/server1.pem" http:key="$CertFolder/server1.key" http:clientcert="$CertFolder/client-ca.pem" \
            & mtls_pid=$!
          ./out/ArmoniK.Api.Mock.exe \
            grpc:port=5004 http:port=5004 \
            http:cert="$CertFolder/server2.pem" http:key="$CertFolder/server2.key" http:clientcert="$CertFolder/client-ca.pem" \
            & mtlsstore_pid=$!
          sleep 5

          cd ArmoniK.Api.Client.Test
          dotnet test -f ${{ matrix.dotnet.framework }} --logger "trx;LogFileName=test-results.trx"; ret=$?

          kill $notls_pid $tls_pid $tlsstore_pid $mtls_pid $mtlsstore_pid
          exit $ret

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: ConnectivityTests ${{ matrix.platform.os }} ${{ matrix.dotnet.framework }} ${{ matrix.handler }}
          path: ./packages/csharp/ArmoniK.Api.Client.Test/TestResults/test-results.trx
          reporter: dotnet-trx

  cpp:
    env:
      CertFolder: "$PWD/../cpp/certs"
    strategy:
      fail-fast: false
      matrix:
        endpoint:
          - mock_env:
              Grpc__Port: 5000
              Http_Port: 4999
            test_env:
              Grpc__Endpoint: http://localhost:5000
              Http__Endpoint: http://localhost:4999
          - mock_env:
              Grpc__Port: 5001
              Http_Port: 5001
              Http__Cert: ../cpp/certs/server1.pem
              Http__Key: ../cpp/certs/server1.key
            test_env:
              Grpc__Endpoint: https://localhost:5001
              Grpc__SSLValidation: enable
              Grpc__CaCert: /app/source/certs/server1-ca.pem
          - mock_env:
              Grpc__Port: 5002
              Http_Port: 5002
              Http__Cert: ../cpp/certs/server2.pem
              Http__Key: ../cpp/certs/server2.key
            test_env:
              Grpc__Endpoint: https://localhost:5002
              Grpc__SSLValidation: enable
          - mock_env:
              Grpc__Port: 5003
              Http_Port: 5003
              Http__Cert: ../cpp/certs/server1.pem
              Http__Key: ../cpp/certs/server1.key
              Client__Cert: ../cpp/certs/client-ca.pem
            test_env:
              Grpc__Endpoint: https://localhost:5003
              Grpc__SSLValidation: enable
              Grpc__CaCert: /app/source/certs/server1-ca.pem
              Grpc__ClientCert: /app/source/certs/client.pem
              Grpc__ClientKey: /app/source/certs/client.key
          - mock_env:
              Grpc__Port: 5004
              Http_Port: 5004
              Http__Cert: ../cpp/certs/server2.pem
              Http__Key: ../cpp/certs/server2.key
              Client__Cert: ../cpp/certs/client-ca.pem
            test_env:
              Grpc__Endpoint: https://localhost:5004
              Grpc__SSLValidation: enable
              Grpc__ClientCert: /app/source/certs/client.pem
              Grpc__ClientKey: /app/source/certs/client.key
          - mock_env:
              Grpc__Port: 5004
              Http_Port: 5004
              Http__Cert: ../cpp/certs/server2.pem
              Http__Key: ../cpp/certs/server2.key
              Client__Cert: ../cpp/certs/client-ca.pem
            test_env:
              Grpc__Endpoint: https://localhost:5004
              Grpc__SSLValidation: enable
              Grpc__ClientCert: /app/source/certs/client-client.pem
          
          - mock_env:
              Grpc__Port: 5004
              Http_Port: 5004
              Http__Cert: ../cpp/certs/server2.pem
              Http__Key: ../cpp/certs/server2.key
              Client__Cert: ../cpp/certs/client-ca.pem
            test_env:
              Grpc__Endpoint: https://localhost:5004
              Grpc__SSLValidation: enable
              Grpc__ClientCert: /app/source/certs/client.p12

    name: Test C++
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          ref: ${{ github.ref }}

      - name: Generate certs
        working-directory: packages/cpp/
        shell: bash
        run: |
          mkdir certs
          cd certs
          ../../../scripts/certs.sh

      - name: Install certs
        working-directory: packages/cpp/certs
        run: |
          sudo apt install ca-certificates
          sudo mkdir -p /usr/local/share/ca-certificates/
          sudo cp server2-ca.pem /usr/local/share/ca-certificates/ca.crt
          sudo update-ca-certificates

      - name: Install .NET Core
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4
        with:
          dotnet-version: 8.x

      - name: Build Mock server
        working-directory: packages/csharp/ArmoniK.Api.Mock
        shell: bash
        run: |
          dotnet publish -o ../out
          [ -e ../out/ArmoniK.Api.Mock.exe ] || ln -s ArmoniK.Api.Mock ../out/ArmoniK.Api.Mock.exe

      - name: Run Mock servers
        working-directory: packages/csharp/
        shell: bash
        env: ${{ matrix.endpoint.mock_env }}
        run: |
          env
          export CertFolder="$PWD/../cpp/certs"
          ./out/ArmoniK.Api.Mock.exe grpc:port=$Grpc__Port http:port=$Http_Port &
          echo "server_pid=$!" >> $GITHUB_ENV
          sleep 5

      - name: Build Test
        working-directory: packages/cpp/tools
        run: |
          ./run_test.sh

      - name: Run Test
        env: ${{ matrix.endpoint.test_env }}
        run: |
          env
          docker run --rm -t --network host \
            -e Grpc__EndPoint="$Grpc__Endpoint" \
            -e Http__EndPoint="${Http__Endpoint:-$Grpc__Endpoint}" \
            -e Grpc__SSLValidation="$Grpc__SSLValidation" \
            -e Grpc__CaCert="$Grpc__CaCert" \
            -e Grpc__mTLS="$Grpc__mTLS" \
            -e Grpc__ClientCert="$Grpc__ClientCert" \ 
            -e Grpc__ClientKey="$Grpc__ClientKey" \
            "armonik-api-cpp:0.1.0"

      - name: Stop Mock Server
        run: |
          kill $server_pid || true
