name: Publish Edge Packages

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  version:
    if: github.actor != 'renovate[bot]' || github.repository_owner != 'aneoconsultingfr'
    runs-on: ubuntu-latest
    name: Version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Generate Version
      # Print to the summary
        run: echo "VERSION=$(npx @aneoconsultingfr/generate-next-version@latest --edge)" >> $GITHUB_STEP_SUMMARY
  tests:
    if: github.actor != 'renovate[bot]' || github.repository_owner != 'aneoconsultingfr'
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projects:
          - packages/csharp/ArmoniK.Api.Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Run tests
        run: |
          cd ${{ matrix.projects }}
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test - ${{ matrix.os }} ${{ matrix.projects }}
          path: ${{ matrix.projects }}/TestResults/test-results.trx
          reporter: dotnet-trx

  release-csharp-packages:
    needs: [tests]
    name: Release C# Packages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        package:
          - packages/csharp/ArmoniK.Api.Common.Channel/ArmoniK.Api.Common.Channel.csproj
          - packages/csharp/ArmoniK.Api.Common/ArmoniK.Api.Common.csproj
          - packages/csharp/ArmoniK.Api.Core/ArmoniK.Api.Core.csproj
          - packages/csharp/ArmoniK.Api.Client/ArmoniK.Api.Client.csproj
          - packages/csharp/ArmoniK.Api.Worker/ArmoniK.Api.Worker.csproj
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Generate Version
        run: echo "VERSION=$(npx @aneoconsultingfr/generate-next-version@latest --edge)" >> $GITHUB_ENV

      - name: Build the package
        run: |
          dotnet build ${{ matrix.package }} -c Release

      - name: Pack the package
        run: |
          dotnet pack ${{ matrix.package }} -c Release -o /tmp/packages -p:PackageVersion=$VERSION
          ls /tmp/packages

      - name: Push the package
        run: dotnet nuget push /tmp/packages/ArmoniK.Api.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  release-angular-package:
    if: github.ref == 'refs/heads/main'
    name: Release Angular Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - run: npm i -g @antfu/ni pnpm

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: nci && cd packages/angular && nci

      - name: Install Protoc
        run: sudo apt install -y protobuf-compiler

      - name: Build protos
        run: cd packages/angular && nr proto:generate:linux

      - name: Update version
        run: nr update-versions $(npx @aneoconsultingfr/generate-next-version@latest --edge)

      - name: Build package
        run: cd packages/angular && nr build

      - name: Release package
        run: nr ci:publish-edge angular dist/aneoconsultingfr/armonik.api.angular
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-web-package:
    if: github.ref == 'refs/heads/main'
    name: Release Web Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - run: npm i -g @antfu/ni pnpm

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          registry-url: https://registry.npmjs.org/

      - name: Install ni
        run: npm i -g @antfu/ni pnpm

      - name: Install dependencies
        run: nci && cd packages/web && nci

      - name: Install Protoc
        run: sudo apt install -y protobuf-compiler

      - name: Build protos
        run: cd packages/web && nr proto:generate:linux

      - name: Build package
        run: cd packages/web && nr build

      - name: Update version
        run: nr update-versions $(npx @aneoconsultingfr/generate-next-version@latest --edge)

      - name: Release package
        run: nr ci:publish-edge web
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  release-python-package:
    if: github.actor != 'renovate[bot]' || github.repository_owner != 'aneoconsultingfr'
    name: Release Python Package
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/python
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: pip update and add build package
        run: bash proto2python.sh ~/pyvenv

      - name: Upload as artifact
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: packages/python/pkg/

      - name: Publish to PyPITest
        if: github.ref != 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.DEV_PYPI_API_TOKEN }}
          print-hash: true
          packages-dir: packages/python/pkg/
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print-hash: true
          packages-dir: packages/python/pkg/
