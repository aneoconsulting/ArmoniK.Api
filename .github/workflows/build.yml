name: Build Dev

on:
  push:
    branches-ignore:
      - release
    tags-ignore: ["**"]

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Generate Version
        id: genver
        run: |
          VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=main)
          echo "::set-output name=version::$VERSION"
          echo $VERSION

  formatCsharp:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          submodules: true

      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Install ReSharper
        run: |
          dotnet tool install -g JetBrains.ReSharper.GlobalTools --version 2022.2.2

      - name: Restore
        run: |
          cd Api/csharp
          dotnet restore ArmoniK.Api.sln

      - name: Reformat
        run: |
          cd Api/csharp
          jb cleanupcode ArmoniK.Api.sln

      - name: Check Diff
        run: |
          DIFF="$(git diff --name-only)"

          if [ -z "$DIFF" ]; then
            echo "OK: Format is clean"
          else
            echo "Error: Format was not clean"
            echo "List of files:"
            echo "$DIFF"
            git diff
            exit 1
          fi

  formatProto:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          submodules: true
      - name: Check Diff
        run: docker run --rm --volume "$(pwd)/Protos/V1:/workspace" --workdir /workspace bufbuild/buf format -d --exit-code

  build-doc:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate protobuf documentation
        uses: addnab/docker-run-action@v3
        with:
          image: pseudomuto/protoc-gen-doc
          options: -v ${{ github.workspace }}/Documentation/api:/out -v ${{ github.workspace }}/Protos/V1:/protos
          run: |
            protoc -I/usr/include -Iprotos --doc_out=/out --doc_opt=markdown,index.md protos/*.proto

  build:
    runs-on: ubuntu-latest
    needs: versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    strategy:
      fail-fast: true
      matrix:
        package:
          - Api/csharp/ArmoniK.Api.Common.Channel/ArmoniK.Api.Common.Channel.csproj
          - Api/csharp/ArmoniK.Api.Common/ArmoniK.Api.Common.csproj
          - Api/csharp/ArmoniK.Api.Core/ArmoniK.Api.Core.csproj
          - Api/csharp/ArmoniK.Api.Client/ArmoniK.Api.Client.csproj
          - Api/csharp/ArmoniK.Api.Worker/ArmoniK.Api.Worker.csproj
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Build the package
        run: |
          dotnet build ${{ matrix.package }} -c Release

      - name: Pack the package
        run: |
          dotnet pack ${{ matrix.package }} -c Release -o /tmp/packages -p:PackageVersion=$VERSION
          ls /tmp/packages

      - name: Push the package
        run: dotnet nuget push /tmp/packages/ArmoniK.Api.*.nupkg -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  python_package:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
    - name: pip update and add build package
      working-directory: ./Api/python/
      run: bash ./proto2python.sh ~/pyvenv
    - name: Upload package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: ./Api/python/pkg/
      
