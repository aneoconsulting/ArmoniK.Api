name: Build Dev

on:
  push:
    branches-ignore:
      - release
    tags-ignore: [ '**' ]

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=main) 
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Install ReSharper
      run: |
        dotnet tool install -g JetBrains.ReSharper.GlobalTools

    - name: Restore
      run: |
        dotnet restore Api/csharp/ArmoniK.Api/ArmoniK.Api.csproj

    - name: Reformat
      run: |
        jb cleanupcode Api/csharp/ArmoniK.Api/ArmoniK.Api.csproj

    - name: Check Diff
      continue-on-error: true
      run: |
        DIFF="$(git diff --name-only)"

        if [ -z "$DIFF" ]; then
          echo "OK: Format is clean"
        else
          echo "Error: Format was not clean"
          echo "List of files:"
          echo "$DIFF"
          git diff
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x
        source-url: https://pkgs.dev.azure.com/aneofr/ArmoniK/_packaging/ArmoniKPackages/nuget/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.PAT_AZURE}}

    - name: Build the package
      run: dotnet build Api/csharp/ArmoniK.Api/ArmoniK.Api.csproj -c Release

    - name: Pack the package
      run: |
        dotnet pack Api/csharp/ArmoniK.Api/ArmoniK.Api.csproj -c Release -o /tmp/packages -p:PackageVersion=$VERSION
        ls /tmp/packages

    - name: Push the package
      run: dotnet nuget push /tmp/packages/ArmoniK.Api*.nupkg --api-key AzureArtifacts

